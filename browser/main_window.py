"""
Ventana Principal del Navegador Web
Incluye interfaz gr√°fica, navegaci√≥n, y gesti√≥n de tabs
"""

import os
import re
from urllib.parse import urlparse, urljoin
from PyQt5.QtWidgets import (QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, 
                             QLineEdit, QPushButton, QTabWidget, QMenuBar, 
                             QMenu, QAction, QToolBar, QStatusBar, QMessageBox,
                             QDialog, QListWidget, QListWidgetItem, QLabel,
                             QDialogButtonBox, QSplitter, QTextEdit, QComboBox,
                             QCheckBox, QSpinBox, QGroupBox, QFormLayout)
from PyQt5.QtCore import Qt, QUrl, pyqtSignal, QTimer
from PyQt5.QtGui import QIcon, QKeySequence, QFont
from PyQt5.QtWebEngineWidgets import (QWebEngineView, QWebEnginePage, 
                                     QWebEngineProfile, QWebEngineSettings)

from .database import DatabaseManager
from .web_tab import WebTab

class MainWindow(QMainWindow):
    """Ventana principal del navegador"""
    
    def __init__(self, data_dir: str):
        super().__init__()
        self.data_dir = data_dir
        self.db_manager = DatabaseManager(data_dir)
        
        # Configurar la ventana
        self.setWindowTitle("PyWebBrowser")
        self.setGeometry(100, 100, 1200, 800)
        
        # Inicializar componentes
        self.setup_ui()
        self.setup_menu()
        self.setup_toolbar()
        self.setup_status_bar()
        self.setup_web_profile()
        
        # Crear la primera pesta√±a
        self.add_new_tab("https://duckduckgo.com")
        
        # Timer para guardar historial autom√°ticamente
        self.save_timer = QTimer()
        self.save_timer.timeout.connect(self.auto_save)
        self.save_timer.start(30000)  # Guardar cada 30 segundos
        
        # Aplicar estilos CSS
        from .config import BROWSER_STYLES
        self.setStyleSheet(BROWSER_STYLES)
    
    def setup_ui(self):
        """Configurar la interfaz de usuario"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout principal
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        # Barra de navegaci√≥n
        nav_layout = QHBoxLayout()
        nav_layout.setContentsMargins(5, 5, 5, 5)
        
        # Botones de navegaci√≥n
        self.back_button = QPushButton("‚Üê")
        self.back_button.setToolTip("Atr√°s")
        self.back_button.clicked.connect(self.navigate_back)
        self.back_button.setEnabled(False)
        
        self.forward_button = QPushButton("‚Üí")
        self.forward_button.setToolTip("Adelante")
        self.forward_button.clicked.connect(self.navigate_forward)
        self.forward_button.setEnabled(False)
        
        self.refresh_button = QPushButton("‚ü≥")
        self.refresh_button.setToolTip("Actualizar")
        self.refresh_button.clicked.connect(self.refresh_page)
        
        self.home_button = QPushButton("üè†")
        self.home_button.setToolTip("Inicio")
        self.home_button.clicked.connect(self.navigate_home)
        
        # Barra de direcciones
        self.url_bar = QLineEdit()
        self.url_bar.setPlaceholderText("Escribe una URL o t√©rmino de b√∫squeda...")
        self.url_bar.returnPressed.connect(self.navigate_to_url)
        
        # Bot√≥n de b√∫squeda
        self.search_button = QPushButton("üîç")
        self.search_button.setToolTip("Buscar en DuckDuckGo")
        self.search_button.clicked.connect(self.navigate_to_url)
        
        # Agregar widgets al layout de navegaci√≥n
        nav_layout.addWidget(self.back_button)
        nav_layout.addWidget(self.forward_button)
        nav_layout.addWidget(self.refresh_button)
        nav_layout.addWidget(self.home_button)
        nav_layout.addWidget(self.url_bar)
        nav_layout.addWidget(self.search_button)
        
        # Widget contenedor para la barra de navegaci√≥n
        nav_widget = QWidget()
        nav_widget.setLayout(nav_layout)
        main_layout.addWidget(nav_widget)
        
        # Pesta√±as del navegador
        self.tab_widget = QTabWidget()
        self.tab_widget.setTabsClosable(True)
        self.tab_widget.setMovable(True)
        self.tab_widget.tabCloseRequested.connect(self.close_tab)
        self.tab_widget.currentChanged.connect(self.tab_changed)
        
        # Bot√≥n para agregar nueva pesta√±a
        self.new_tab_button = QPushButton("+")
        self.new_tab_button.setToolTip("Nueva pesta√±a")
        self.new_tab_button.clicked.connect(lambda: self.add_new_tab())
        self.tab_widget.setCornerWidget(self.new_tab_button)
        
        main_layout.addWidget(self.tab_widget)
    
    def setup_menu(self):
        """Configurar el men√∫ principal"""
        menubar = self.menuBar()
        
        # Men√∫ Archivo
        file_menu = menubar.addMenu("Archivo")
        
        new_tab_action = QAction("Nueva pesta√±a", self)
        new_tab_action.setShortcut(QKeySequence.AddTab)
        new_tab_action.triggered.connect(lambda: self.add_new_tab())
        file_menu.addAction(new_tab_action)
        
        new_window_action = QAction("Nueva ventana", self)
        new_window_action.setShortcut(QKeySequence.New)
        new_window_action.triggered.connect(self.new_window)
        file_menu.addAction(new_window_action)
        
        file_menu.addSeparator()
        
        quit_action = QAction("Salir", self)
        quit_action.setShortcut(QKeySequence.Quit)
        quit_action.triggered.connect(self.close)
        file_menu.addAction(quit_action)
        
        # Men√∫ Navegaci√≥n
        nav_menu = menubar.addMenu("Navegaci√≥n")
        
        back_action = QAction("Atr√°s", self)
        back_action.setShortcut(QKeySequence.Back)
        back_action.triggered.connect(self.navigate_back)
        nav_menu.addAction(back_action)
        
        forward_action = QAction("Adelante", self)
        forward_action.setShortcut(QKeySequence.Forward)
        forward_action.triggered.connect(self.navigate_forward)
        nav_menu.addAction(forward_action)
        
        refresh_action = QAction("Actualizar", self)
        refresh_action.setShortcut(QKeySequence.Refresh)
        refresh_action.triggered.connect(self.refresh_page)
        nav_menu.addAction(refresh_action)
        
        home_action = QAction("Inicio", self)
        home_action.triggered.connect(self.navigate_home)
        nav_menu.addAction(home_action)
        
        # Men√∫ Herramientas
        tools_menu = menubar.addMenu("Herramientas")
        
        history_action = QAction("Historial", self)
        history_action.setShortcut(QKeySequence("Ctrl+H"))
        history_action.triggered.connect(self.show_history)
        tools_menu.addAction(history_action)
        
        favorites_action = QAction("Favoritos", self)
        favorites_action.setShortcut(QKeySequence("Ctrl+B"))
        favorites_action.triggered.connect(self.show_favorites)
        tools_menu.addAction(favorites_action)
        
        cookies_action = QAction("Gestionar Cookies", self)
        cookies_action.triggered.connect(self.show_cookies)
        tools_menu.addAction(cookies_action)
        
        tools_menu.addSeparator()
        
        settings_action = QAction("Configuraci√≥n", self)
        settings_action.triggered.connect(self.show_settings)
        tools_menu.addAction(settings_action)
        
        # Men√∫ Ayuda
        help_menu = menubar.addMenu("Ayuda")
        
        about_action = QAction("Acerca de", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
    
    def setup_toolbar(self):
        """Configurar la barra de herramientas"""
        toolbar = QToolBar()
        self.addToolBar(toolbar)
        
        # Agregar acciones comunes
        toolbar.addAction("‚ü≤", self.navigate_back)
        toolbar.addAction("‚ü≥", self.navigate_forward)
        toolbar.addAction("‚Üª", self.refresh_page)
        toolbar.addAction("üè†", self.navigate_home)
        toolbar.addSeparator()
        toolbar.addAction("üìñ", self.show_history)
        toolbar.addAction("‚≠ê", self.show_favorites)
        toolbar.addAction("üç™", self.show_cookies)
        toolbar.addSeparator()
        toolbar.addAction("‚öô", self.show_settings)
    
    def setup_status_bar(self):
        """Configurar la barra de estado"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("Listo")
    
    def setup_web_profile(self):
        """Configurar el perfil web para cookies persistentes"""
        profile_path = os.path.join(self.data_dir, "browser_profile")
        if not os.path.exists(profile_path):
            os.makedirs(profile_path)
        
        self.web_profile = QWebEngineProfile("PyWebBrowser")
        self.web_profile.setPersistentStoragePath(profile_path)
        self.web_profile.setCachePath(os.path.join(profile_path, "cache"))
        
        # Configurar las opciones del navegador
        settings = self.web_profile.settings()
        settings.setAttribute(QWebEngineSettings.JavascriptEnabled, True)
        settings.setAttribute(QWebEngineSettings.PluginsEnabled, True)
        settings.setAttribute(QWebEngineSettings.LocalStorageEnabled, True)
        settings.setAttribute(QWebEngineSettings.AutoLoadImages, True)
    
    def add_new_tab(self, url: str = None):
        """Agregar una nueva pesta√±a"""
        if url is None:
            url = "https://duckduckgo.com"
        
        web_tab = WebTab(self.web_profile, self.db_manager)
        
        # Conectar se√±ales
        web_tab.urlChanged.connect(self.update_url_bar)
        web_tab.titleChanged.connect(self.update_tab_title)
        web_tab.loadProgress.connect(self.update_load_progress)
        web_tab.loadFinished.connect(self.update_navigation_buttons)
        
        # Agregar la pesta√±a
        index = self.tab_widget.addTab(web_tab, "Nueva pesta√±a")
        self.tab_widget.setCurrentIndex(index)
        
        # Navegar a la URL
        web_tab.load(QUrl(url))
        
        return web_tab
    
    def close_tab(self, index: int):
        """Cerrar una pesta√±a"""
        if self.tab_widget.count() > 1:
            widget = self.tab_widget.widget(index)
            self.tab_widget.removeTab(index)
            widget.deleteLater()
        else:
            self.close()
    
    def tab_changed(self, index: int):
        """Manejar el cambio de pesta√±a"""
        if index >= 0:
            current_tab = self.tab_widget.widget(index)
            if current_tab:
                self.update_url_bar(current_tab.url())
                self.update_navigation_buttons()
    
    def get_current_tab(self) -> WebTab:
        """Obtener la pesta√±a actual"""
        return self.tab_widget.currentWidget()
    
    def navigate_to_url(self):
        """Navegar a la URL ingresada en la barra de direcciones"""
        url_text = self.url_bar.text().strip()
        if not url_text:
            return
        
        current_tab = self.get_current_tab()
        if not current_tab:
            return
        
        # Verificar si es una URL v√°lida
        if self.is_valid_url(url_text):
            url = url_text
            if not url.startswith(('http://', 'https://')):
                url = 'https://' + url
        else:
            # Si no es una URL, buscar en DuckDuckGo
            url = f"https://duckduckgo.com/?q={url_text}"
        
        current_tab.load(QUrl(url))
    
    def is_valid_url(self, text: str) -> bool:
        """Verificar si el texto es una URL v√°lida"""
        url_pattern = re.compile(
            r'^(?:http|ftp)s?://'  # http:// or https://
            r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|'  # domain...
            r'localhost|'  # localhost...
            r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
            r'(?::\d+)?'  # optional port
            r'(?:/?|[/?]\S+)$', re.IGNORECASE)
        
        # Tambi√©n considerar URLs sin protocolo pero con dominio
        domain_pattern = re.compile(
            r'^(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)$', 
            re.IGNORECASE)
        
        return bool(url_pattern.match(text)) or bool(domain_pattern.match(text))
    
    def navigate_back(self):
        """Navegar hacia atr√°s"""
        current_tab = self.get_current_tab()
        if current_tab:
            current_tab.back()
    
    def navigate_forward(self):
        """Navegar hacia adelante"""
        current_tab = self.get_current_tab()
        if current_tab:
            current_tab.forward()
    
    def refresh_page(self):
        """Actualizar la p√°gina actual"""
        current_tab = self.get_current_tab()
        if current_tab:
            current_tab.reload()
    
    def navigate_home(self):
        """Navegar a la p√°gina de inicio"""
        home_url = self.db_manager.get_setting("home_url", "https://duckduckgo.com")
        current_tab = self.get_current_tab()
        if current_tab:
            current_tab.load(QUrl(home_url))
    
    def update_url_bar(self, url: QUrl):
        """Actualizar la barra de direcciones"""
        self.url_bar.setText(url.toString())
        self.status_bar.showMessage(f"Cargando: {url.toString()}")
    
    def update_tab_title(self, title: str):
        """Actualizar el t√≠tulo de la pesta√±a"""
        current_index = self.tab_widget.currentIndex()
        if current_index >= 0:
            # Limitar la longitud del t√≠tulo
            if len(title) > 20:
                title = title[:17] + "..."
            self.tab_widget.setTabText(current_index, title or "Sin t√≠tulo")
    
    def update_load_progress(self, progress: int):
        """Actualizar el progreso de carga"""
        if progress < 100:
            self.status_bar.showMessage(f"Cargando... {progress}%")
        else:
            self.status_bar.showMessage("P√°gina cargada")
    
    def update_navigation_buttons(self):
        """Actualizar el estado de los botones de navegaci√≥n"""
        current_tab = self.get_current_tab()
        if current_tab:
            self.back_button.setEnabled(current_tab.history().canGoBack())
            self.forward_button.setEnabled(current_tab.history().canGoForward())
    
    def show_history(self):
        """Mostrar el di√°logo de historial"""
        from .dialogs import HistoryDialog
        dialog = HistoryDialog(self.db_manager, self)
        dialog.url_selected.connect(self.load_url_in_current_tab)
        dialog.exec_()
    
    def show_favorites(self):
        """Mostrar el di√°logo de favoritos"""
        from .dialogs import FavoritesDialog
        dialog = FavoritesDialog(self.db_manager, self)
        dialog.url_selected.connect(self.load_url_in_current_tab)
        dialog.exec_()
    
    def show_cookies(self):
        """Mostrar el di√°logo de gesti√≥n de cookies"""
        from .dialogs import CookiesDialog
        dialog = CookiesDialog(self.db_manager, self)
        dialog.exec_()
    
    def show_settings(self):
        """Mostrar el di√°logo de configuraci√≥n"""
        from .dialogs import SettingsDialog
        dialog = SettingsDialog(self.db_manager, self)
        dialog.exec_()
    
    def show_about(self):
        """Mostrar informaci√≥n sobre el navegador"""
        QMessageBox.about(self, "Acerca de PyWebBrowser", 
                         "PyWebBrowser v1.0\n\n"
                         "Un navegador web completo construido con Python y PyQt5\n\n"
                         "Caracter√≠sticas:\n"
                         "‚Ä¢ Soporte HTTPS\n"
                         "‚Ä¢ Integraci√≥n con DuckDuckGo\n"
                         "‚Ä¢ Historial de navegaci√≥n\n"
                         "‚Ä¢ Gesti√≥n de cookies\n"
                         "‚Ä¢ Soporte completo de JavaScript\n"
                         "‚Ä¢ Pesta√±as m√∫ltiples\n"
                         "‚Ä¢ Favoritos\n"
                         "‚Ä¢ Persistencia de datos")
    
    def load_url_in_current_tab(self, url: str):
        """Cargar una URL en la pesta√±a actual"""
        current_tab = self.get_current_tab()
        if current_tab:
            current_tab.load(QUrl(url))
        else:
            self.add_new_tab(url)
    
    def new_window(self):
        """Crear una nueva ventana del navegador"""
        new_window = MainWindow(self.data_dir)
        new_window.show()
    
    def auto_save(self):
        """Guardar autom√°ticamente los datos"""
        # Aqu√≠ se podr√≠an agregar operaciones de guardado autom√°tico
        pass
    
    def closeEvent(self, event):
        """Manejar el cierre de la ventana"""
        # Guardar configuraciones antes de cerrar
        try:
            # Guardar la geometr√≠a de la ventana
            geometry = self.saveGeometry()
            self.db_manager.save_setting("window_geometry", geometry.toHex().data().decode())
            
            # Guardar las URLs abiertas
            open_urls = []
            for i in range(self.tab_widget.count()):
                tab = self.tab_widget.widget(i)
                if tab:
                    open_urls.append(tab.url().toString())
            
            if open_urls:
                import json
                self.db_manager.save_setting("open_tabs", json.dumps(open_urls))
                
        except Exception as e:
            print(f"Error al guardar configuraciones: {e}")
        
        event.accept()
